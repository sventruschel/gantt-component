[{"name":"Gantt","type":"BODY_COMPONENT","allowedTypes":[],"orientation":"HORIZONTAL","jsx":"(() => {\n  const {\n    Highcharts,\n    HighchartsGantt,\n    HighchartsReact\n  } = window;\n  HighchartsGantt(Highcharts);\n  const {\n    content,\n    propertyDate,\n    propertyEndDate,\n    model,\n    filter,\n    property,\n    creditsText,\n    aligment,\n    caption,\n    aligmentcaption\n  } = options;\n  const {\n    useText,\n    GetAll,\n    getProperty,\n    env\n  } = B;\n  const isDev = env === 'dev';\n  const prodCanvas = <>\n        <GetAll modelId={model} filter={filter} skip={0} take={30}>\n          {({\n        loading,\n        error,\n        data\n      }) => {\n        if (loading) {\n          return <span>Loading....</span>;\n        }\n\n        if (error) {\n          return <span>Something went wrong: {error.message} :</span>;\n        }\n\n        const {\n          results\n        } = data;\n        const {\n          name: prop\n        } = getProperty(property);\n        const {\n          name: propDate\n        } = getProperty(propertyDate);\n        const {\n          name: propEndDate\n        } = getProperty(propertyEndDate);\n\n        const makeDataArray = input => {\n          const output = [];\n          input.forEach(item => {\n            const startDate = new Date(item[propDate]);\n            const endDate = new Date(item[propEndDate]);\n            output.push({\n              name: item[prop],\n              start: Date.UTC(startDate.getUTCFullYear(), startDate.getUTCMonth(), startDate.getUTCDate()),\n              end: Date.UTC(endDate.getUTCFullYear(), endDate.getUTCMonth(), endDate.getUTCDate())\n            });\n          });\n          return output;\n        };\n\n        return <div>\n                <ul>\n                  <HighchartsReact containerProps={{\n              className: classes.chartContainer\n            }} highcharts={Highcharts} constructorType=\"ganttChart\" options={{\n              credits: {\n                text: useText(creditsText),\n                position: {\n                  align: `${aligment}`,\n                  x: 0\n                }\n              },\n              chart: {\n                backgroundColor: classes.chartContainer\n              },\n              yAxis: {\n                grid: {}\n              },\n              xAxis: {\n                grid: {}\n              },\n              series: [{\n                name: useText(content),\n                data: makeDataArray(results)\n              }],\n              caption: {\n                text: useText(caption),\n                align: `${aligmentcaption}`,\n                x: 0,\n                y: 0\n              }\n            }} />\n                </ul>\n              </div>;\n      }}\n        </GetAll>\n      </>;\n  const HighCharts = <HighchartsReact containerProps={{\n    className: classes.chartContainer\n  }} highcharts={Highcharts} constructorType=\"ganttChart\" options={{\n    credits: {\n      text: useText(creditsText),\n      position: {\n        align: `${aligment}`,\n        x: 0\n      }\n    },\n    chart: {\n      backgroundColor: classes.chartContainer\n    },\n    series: [{\n      name: 'Projects',\n      data: [{\n        name: 'Project 1',\n        start: Date.UTC(2021, 10, 1),\n        end: Date.UTC(2021, 10, 25)\n      }, {\n        name: 'Project 2',\n        start: Date.UTC(2021, 10, 26),\n        end: Date.UTC(2021, 11, 21)\n      }, {\n        name: 'Project 3',\n        start: Date.UTC(2021, 11, 22),\n        end: Date.UTC(2022, 0, 7)\n      }]\n    }],\n    caption: {\n      text: useText(caption),\n      align: `${aligmentcaption}`,\n      x: 0,\n      y: 0\n    }\n  }} />;\n  const devCanvas = <div>\n        <ul>{HighCharts}</ul>\n      </div>;\n\n  if (!isDev) {\n    if (model) {\n      if (propertyDate) {\n        if (propertyEndDate) {\n          return prodCanvas;\n        }\n      }\n    }\n  }\n\n  return devCanvas;\n})()","styles":"B => t => {\n  const {\n    Styling\n  } = B;\n  const newStyling = new Styling(t);\n  return {\n    chartContainer: {\n      fill: ({\n        options: {\n          ganttfill\n        }\n      }) => [newStyling.getColor(ganttfill), '!important']\n    }\n  };\n}","functions":[],"triggers":[],"interactions":{},"componentHash":"9d2c68d6d0a88d5e0073d6ac0d6f7ebc02c448a54c34e203995180da46c6b38a"}]
